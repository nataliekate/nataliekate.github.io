{"data":{"site":{"siteMetadata":{"title":"Natalie's Blog","author":"nataliekate"}},"markdownRemark":{"id":"e3a16216-a59c-5b0c-8073-3fe1b745d6e9","excerpt":"What is RESTREST is acronym REpresentational State Transfer. It is an architectural style, or design pattern, for APIs. It was first presented by Roy Fielding…","html":"<h2>What is REST</h2>\n<blockquote>\n<p>REST is acronym <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer. It is an architectural style, or design pattern, for APIs. It was first presented by Roy Fielding in 2000.</p>\n</blockquote>\n<h2>REST vs. RESTful</h2>\n<p>RESTful is typically used to refer to web services implementing REST architecture.</p>\n<p>Web services that conform to the REST architectural style, called <em>RESTful</em> Web services (RWS).</p>\n<p>It means when a RESTful API is called, the server will <em>transfer</em> to the client a <em>representation</em> of the <em>state</em> of the requested resource.</p>\n<p>The representation of the state can be in a JSON format, and probably for most APIs this is indeed the case. It can also be in XML or HTML format.</p>\n<p>What the server does when the client calls the API depends on 2 things it provides:</p>\n<ol>\n<li>\n<p>An <em>identifier</em> for the resource: URL for the resource, known as the <strong>endpoint</strong>.</p>\n</li>\n<li>\n<p>The <em>operation</em> you want the server to perform on the resource: an <strong>HTTP method</strong> or a <strong>verb</strong>.</p>\n</li>\n</ol>\n<h3>RESTful Web Services</h3>\n<p>HTTP-based RESTful APIs are defined with the following aspects:</p>\n<ul>\n<li>a <strong>base URI</strong>, such as <code class=\"language-text\">http://api.example.com/collection/</code></li>\n<li>standard <strong>HTTP methods</strong> (e.g., <code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">PATCH</code> and <code class=\"language-text\">DELETE</code>)</li>\n<li>a <strong>media type</strong> that defines state transition data elements (e.g., Atom, microformats, application/vnd.collection+json, etc.)</li>\n</ul>\n<h2>Architectural Constraints</h2>\n<p>REST defines 6 architectural constraints which make any web service – a true RESTful API.</p>\n<ol>\n<li>\n<p><strong>Client-server architecture</strong></p>\n<p>Seperate user interface from data storage, meaning that client application and server application MUST be able to evolve separately without any dependency on each other.</p>\n</li>\n<li>\n<p><strong>Stateless</strong></p>\n<p>The client-server communication is constrained by no client context being stored on the server between requests.</p>\n<p>Each request from any client contains all the information necessary to service the request, and session state is kept entirely in the client.</p>\n<p>The session state can be transferred by the server to another service such as a database to maintain a persistent state for a period and allow authentication.</p>\n</li>\n<li>\n<p><strong>Cacheable</strong></p>\n<p>Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. </p>\n<p>The advantage of adding cache constraints is that they have the potential to partially or completely eliminate some interactions, improving efficiency, scalability, and user-perceived performance by reducing the average latency of a series of interactions. </p>\n</li>\n<li>\n<p><strong>Uniform interface</strong></p>\n<p>The uniform interface constraint is <strong>fundamental</strong> to the design of any RESTful system. It simplifies and decouples the architecture, which enables each part to evolve independently.</p>\n<p>REST is defined by <em>four</em> interface constraints: </p>\n<ul>\n<li>\n<p>identification of resources:</p>\n<p>for example using URIs or URNs.</p>\n</li>\n<li>\n<p>manipulation of resources through representations: </p>\n<p>A representation consists of data, metadata describing the data, and, on occasion, metadata to describe the metadata (usually for the purpose of verifying message integrity). Other commonly used but less precise names for a representation include: document, file, and HTTP message entity, instance, or variant.</p>\n<p>The data format of a representation is known as a <strong>media type</strong>.</p>\n<p>When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource.</p>\n</li>\n<li>\n<p>self-descriptive messages:</p>\n<p>Each message includes enough information to describe how to process the message. </p>\n</li>\n<li>\n<p>hypermedia as the engine of application state(<a href=\"https://restfulapi.net/hateoas/\">HATEOAS</a>):</p>\n<p>Whenever relevant, a resource should contain links (HATEOAS) pointing to relative URIs to fetch related information.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Layered system</p>\n<p>A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers can improve system scalability by enabling load balancing and by providing shared caches. They can also enforce security policies.</p>\n</li>\n<li>\n<p>Code on demand (optional)</p>\n<p>Most of the time you will be sending the static representations of resources in form of XML or JSON. But when you need to, you are free to return executable code to support a part of your application: for example, compiled components such as Java applets, or client-side scripts such as JavaScript.</p>\n<p>Allowing features to be downloaded after deployment improves system extensibility. However, it also reduces visibility, and thus is only an optional constraint within REST.</p>\n</li>\n</ol>","frontmatter":{"title":"RESTful API?","date":"May 19, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/restful_api/","previous":{"fields":{"slug":"/rebase_merge/"},"frontmatter":{"title":"rebase和merge的区别"}},"next":{"fields":{"slug":"/message_vs_entity/"},"frontmatter":{"title":"HTTP Message vs. HTTP Entity"}}}}